{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Falih\\\\Documents\\\\chat-app\\\\client\\\\src\\\\components\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch('http://localhost:5000/api/messages');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const result = await response.json();\n\n        // Handle the new API response format\n        if (result.success && result.data) {\n          setMessages(result.data);\n        } else if (Array.isArray(result)) {\n          // Fallback for old format\n          setMessages(result);\n        } else {\n          throw new Error('Invalid response format');\n        }\n      } catch (err) {\n        console.error('Error fetching messages:', err);\n        setError(`Failed to load messages: ${err.message}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMessages();\n  }, []);\n  const addMessage = async message => {\n    try {\n      setError(null);\n      const response = await fetch('http://localhost:5000/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: message.username,\n          content: message.content\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success && result.data) {\n        setMessages(prevMessages => [result.data, ...prevMessages]);\n      } else {\n        throw new Error('Invalid response format from server');\n      }\n    } catch (err) {\n      console.error('Error sending message:', err);\n      setError(`Failed to send message: ${err.message}`);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        marginBottom: '10px',\n        padding: '10px',\n        border: '1px solid red'\n      },\n      children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Dismiss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"cs3D4i5NKu67WmfKAPFvxZcuk7s=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","MessageList","MessageInput","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","loading","setLoading","error","setError","fetchMessages","response","fetch","ok","Error","status","result","json","success","data","Array","isArray","err","console","message","addMessage","method","headers","body","JSON","stringify","username","content","errorData","prevMessages","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","marginBottom","padding","border","onClick","marginLeft","onSend","_c","$RefreshReg$"],"sources":["C:/Users/Falih/Documents/chat-app/client/src/components/Chat.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\n\nconst Chat = () => {\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchMessages = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n\n                const response = await fetch('http://localhost:5000/api/messages');\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n\n                const result = await response.json();\n\n                // Handle the new API response format\n                if (result.success && result.data) {\n                    setMessages(result.data);\n                } else if (Array.isArray(result)) {\n                    // Fallback for old format\n                    setMessages(result);\n                } else {\n                    throw new Error('Invalid response format');\n                }\n            } catch (err) {\n                console.error('Error fetching messages:', err);\n                setError(`Failed to load messages: ${err.message}`);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchMessages();\n    }, []);\n\n    const addMessage = async (message) => {\n        try {\n            setError(null);\n\n            const response = await fetch('http://localhost:5000/api/messages', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    username: message.username,\n                    content: message.content,\n                }),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n            }\n\n            const result = await response.json();\n\n            if (result.success && result.data) {\n                setMessages((prevMessages) => [result.data, ...prevMessages]);\n            } else {\n                throw new Error('Invalid response format from server');\n            }\n        } catch (err) {\n            console.error('Error sending message:', err);\n            setError(`Failed to send message: ${err.message}`);\n        }\n    };\n\n    if (loading) {\n        return <div>Loading messages...</div>;\n    }\n\n    return (\n        <div>\n            {error && (\n                <div style={{ color: 'red', marginBottom: '10px', padding: '10px', border: '1px solid red' }}>\n                    {error}\n                    <button onClick={() => setError(null)} style={{ marginLeft: '10px' }}>\n                        Dismiss\n                    </button>\n                </div>\n            )}\n            <MessageList messages={messages} />\n            <MessageInput onSend={addMessage} />\n        </div>\n    );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}